from __future__ import annotations

import argparse, json, sys
from pathlib import Path
from datetime import datetime, timezone
from .thresholds_loader import load_policy

def collect_runs(runs_dir: Path) -> dict:
    # 聚合示例：按需扩展，遇不到文件返回占位
    metrics = {
        "clarity": {"spectrum_power": 0.70},
        "noise": {"energy": 0.35},
        "drift": {"bandwidth": 0.22},
        "adversarial": {"gap": 0.15},
    }
    # TODO: 遍历 runs_dir/**/*.json，合并真实指标（若目录为空，使用上面默认值示例）
    return metrics

def eval_gate(policy: dict, metrics: dict) -> dict:
    mode = policy.get("gate", {}).get("mode", "strict")
    checks = []
    fails = warns = 0
    for rule in policy.get("gate", {}).get("rules", []):
        name = rule["name"]; mkey = rule["metric"]; op = rule["op"]
        val = float(rule["value"]); sev = rule.get("severity","fail")
        # 读取 metrics 的嵌套键
        try:
            top, sub = mkey.split(".")
            actual = float(metrics[top][sub])
        except Exception:
            actual = float("nan")
        ok = (
            (op == ">=" and actual >= val) or
            (op == "<=" and actual <= val) or
            (op == ">" and actual > val) or
            (op == "<" and actual < val) or
            (op == "==" and actual == val)
        )
        if not ok and sev == "fail": fails += 1
        if not ok and sev == "warn": warns += 1
        checks.append({"name":name,"ok":ok,"actual":actual,"op":op,"value":val,"severity":sev})
    result = "fail" if fails > 0 else "pass"
    return {"mode": mode, "checks": checks, "result": result, "fail_count": fails, "warn_count": warns}

def write_validation(out_dir: Path, summary: dict) -> None:
    out_dir.mkdir(parents=True, exist_ok=True)
    (out_dir / "metrics_summary.json").write_text(json.dumps(summary, indent=2), encoding="utf-8")
    # 生成 markdown
    lines = ["<!-- Generated by aggregator. Do not edit. -->", "# Validation Summary", ""]
    lines.append(f"- Policy version: `{summary.get('policy_version')}`")
    lines.append(f"- Gate result: **{summary['gate']['result']}** "
                 f"(fails={summary['gate']['fail_count']}, warns={summary['gate']['warn_count']})")
    lines.append("")
    lines.append("| name | op | value | actual | severity | ok |")
    lines.append("|---|---:|---:|---:|---|---|")
    for c in summary["gate"]["checks"]:
        row = "| {name} | {op} | {value} | {actual:.4f} | {severity} | {ok} |".format(
            name=c["name"],
            op=c["op"],
            value=c["value"],
            actual=c["actual"],
            severity=c["severity"],
            ok=str(c["ok"]).lower(),
        )
        lines.append(row)
    (out_dir / "VALIDATION.md").write_text("\n".join(lines) + "\n", encoding="utf-8")

def aggregate(runs_dir: Path | str = "validation/runs", out_dir: Path | str = "validation") -> dict:
    runs_path = Path(runs_dir)
    out_path = Path(out_dir)
    policy = load_policy()
    metrics = collect_runs(runs_path)
    gate = eval_gate(policy, metrics)
    summary = {
        "policy_version": policy.get("policy_version","unknown"),
        "metrics": metrics,
        "gate": gate,
        "overall_status": gate.get("result"),
        "timestamp_utc": datetime.now(timezone.utc).isoformat()
    }
    write_validation(out_path, summary)
    return summary

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--runs-dir", default="validation/runs")
    ap.add_argument("--out-dir", default="validation")
    args = ap.parse_args()
    summary = aggregate(args.runs_dir, args.out_dir)
    gate = summary["gate"]
    print(f"[aggregator] gate.result={gate['result']}")
    if gate["result"] != "pass":
        sys.exit(2)

if __name__ == "__main__":
    main()
